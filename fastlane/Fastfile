require_relative "VersionIncrement"
default_platform(:android)
branch = ENV['BRANCH_NAME'] || `git rev-parse --abbrev-ref HEAD`.strip

platform :android do
  desc "Create the APK based on branch type"
  lane :createApk do

    puts "Current branch: #{branch}"


    if branch == "main"
        gradle(
        tasks: ["clean", "assembleRelease"],
        project_dir: "android"
      )


    elsif branch.start_with?("ticket")
        gradle(
        tasks: ["clean", "assembleRelease"],
        project_dir: 'android'
      )

    elsif branch == "dev"
        gradle(
        tasks: ["clean", "assembleRelease"],
        project_dir: "android"
      )

    else
      UI.user_error!("Unsupported branch: #{branch}")
    end

    apk_path = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]

    puts "Generated APK path: #{apk_path}"

    firebase_app_distribution(
      app: "1:1030095982155:android:d1598ed5483d261ccd87ce",
      testers: "shalini@electorq.com, shalinibhatt6263@gmail.com",
      groups: "yoho",
      release_notes: "Testing for ticket: #{branch}",
      firebase_cli_token: "1//0g8CbFtpsckS-CgYIARAAGBASNgF-L9Irbum-4zbkTPPr3JVxc3WlNidSWNUbxXJWV04wUlP1RMdSYR_7j7TTLWdU7H-tRgCGww",
      apk_path: apk_path
    )
  end

  desc "Build and upload the app to the Play Store for internal testing release"
  lane :playstoreInternal do
    user_email = ENV['USER_NAME'] || `git config user.name`.strip
    user_name = ENV['USER_EMAIL'] ||  `git config user.name`.strip

    puts "this is the name and email of the user #{user_email} #{user_name}"
  
    sh("git config --global user.email '#{user_email}'")
    sh("git config --global user.name '#{user_name}'")
    
  gradle_file_path = "../android/app/build.gradle"

  android_increment_my_version_code_and_name
  
  version_code = File.read(gradle_file_path).match(/versionCode\s+(\d+)/)[1]
  version_name = File.read(gradle_file_path).match(/versionName\s+"(.+?)"/)[1]


  project_dir = 'android'
  gradle(
  task: "clean",
  project_dir: project_dir
  )

  gradle(
    task: 'bundle',
    project_dir: project_dir,
    build_type: 'Debug',
  )

  aab_path =  Actions.lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]

  if aab_path.nil?
    UI.message ".AAB generated"
  else
    UI.message ".AAB not generated"

  git_add(path:File.absolute_path("../android/app/build.gradle"))
  git_commit(path:File.absolute_path("../android/app/build.gradle"),message: "Version Bump in #{branch}. Updated with version code: #{version_code} and version name: #{version_name}")
  push_to_git_remote
  end
end
end
